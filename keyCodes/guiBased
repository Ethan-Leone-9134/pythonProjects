"""
File Name   :  guiBased.py
Author      :  Ethan Leone
Date        :  5/19/2023
Description :  Uses files to store personel data for key codes with an application window

Usage:
- Ensure that the required libraries are installed by running 'pip install _______'.
- Update any custom modules.
- Run the script to perform the desired tasks.
"""


from PyQt5 import QtGui
from PyQt5.QtGui import (QPainter, QColor, QBrush, QFont, QPalette, QIcon)
from PyQt5.QtCore import (Qt, QSize, QCoreApplication)
from PyQt5.QtWidgets import (
    QApplication, QDesktopWidget, QMainWindow, QPushButton, QLabel,
    QTextEdit, QCheckBox, QVBoxLayout, QLineEdit, QHBoxLayout, QFrame,
    QScrollArea, QWidget
)
import sys
import time
import fileInteractor as FI    # Custom module for storage
from datetime import datetime


class primeWindow(QMainWindow):    # Creates figure window object
    """
    Class [Description]
    Attributes:
        name (type) : [Description]
        screen

    Methods:
        name        : [Description]
    """
    
    def __init__(self):         # Names the figure window as "self"
        super().__init__()      # Gives figure window its properties
        self.screen = QDesktopWidget().screenGeometry()                 # Find screen dimensions
        self.winSize = [self.screen.width(), self.screen.height()]      # Window dimensions
        self.setGeometry(0, 0, self.winSize[0], self.winSize[1])        # Set figure dimensions to screen size
        self.setWindowTitle("Passcodes")          # Create figure window name
        
        self.pinBox = centeredLabel("_ - _ - _ - _", 50)
        self.pinBox.setGeometry(700, 400, 600, 100)

        self.letterInfo = centeredLabel("Enter - Punch \n  I - Info\n N - New", 20)
        self.letterInfo.setGeometry(1500, 50, 300, 350)

        self.validCode = centeredLabel("  ", 25)
        self.validCode.setGeometry(500, 500, 1000, 100)


    def keyPressEvent(self, event):
        code = event.key()
        modifiers = event.modifiers()
        currPin = (str(self.pinBox.text())).split(' - ')      # Split into array

        if code == 16777219:              # Backspace
            for i in range(1,5):
                if currPin[-i] != "_":
                    currPin[-i] = "_"
                    break
            self.pinBox.setText(' - '.join(currPin))          # Set label
            self.validCode.setText("   ")
        elif '_' in currPin:            # If there is room for another number
            if (code > 47) & (code < 58):     # Number
                currPin[currPin.index('_')] = str(code - 48)    # Set earlist _ to input
                self.pinBox.setText(' - '.join(currPin))          # Set label
                if '_' not in currPin:
                    if FI.testPin(''.join(currPin)):    # If pin in folder
                        self.validCode.setText("Pin Code Recognized")
                    else:                               # If pin not in folder
                        self.validCode.setText("Pin Code Not Recognized")
        else:                           # If the code is full and usable
            if FI.testPin(''.join(currPin)):
                if code == 16777220:              # Enter
                    self.punchEntered(''.join(currPin))
                elif code == 73:                   # Letter I
                    self.infoReq(''.join(currPin))
            else:
                if code == 78:                   # Letter N
                    self.newPin(''.join(currPin))


    def punchEntered(self, pin:str):
        if pin == "9999":
            self.admin = adminWindow()
            self.admin.show()
            while self.admin.isVisible():    # Wait for the settings window to be closed
                QApplication.processEvents()
        else:
            userData = FI.readPin(pin)                 # Get user's information
            currTime = datetime.fromtimestamp(round(time.time())).strftime("%A, %B %d, %Y %I:%M:%S")
            command = f'{userData["Name"]} : {currTime}'
            self.validCode.setText(command)
            userData["punches"].append(round(time.time())) # Add punch to record
            FI.writePin(pin, userData)                 # Save user data
        self.resetScreen()


    def infoReq(self, pin:str):
        self.infoWindow = infoWindow(pin)
        self.infoWindow.show()
        while self.infoWindow.isVisible():    # Wait for the settings window to be closed
            QApplication.processEvents()
        

    def newPin(self, pin: str):
        attributeList = ["Name", "Birthday", "Phone Number", "E-Mail", "Address"]
        userData = {}  # Dictionary to store attribute-value pairs

        for attribute in attributeList:
            # value = input(f"Enter {attribute}: ")
            value = ""
            userData[attribute] = value
        
        userData.update({"Pincode": pin, 
                         "creationDate": round(time.time()), 
                         "punches": [round(time.time())]})

        FI.writePin(pin, userData)        # Save user data
        self.infoReq(pin)
        self.resetScreen()


    def resetScreen(self):
        QApplication.processEvents()
        time.sleep(2)
        self.pinBox.setText("_ - _ - _ - _")
        self.validCode.setText(" ")



class infoWindow(QMainWindow):            # Creates figure window object
    def __init__(self, pin:str):                             # Names the figure window as "self"
        super().__init__()                                  # Gives figure window its properties
        self.screen = QDesktopWidget().screenGeometry()                 # Find screen dimensions
        self.winSize = [self.screen.width(), self.screen.height()]      # Window dimensions
        self.setGeometry(0, 0, self.winSize[0], self.winSize[1])        # Set figure dimensions to screen size
        self.setWindowTitle("User Information")                              # Create figure window name

        self.userData = FI.readPin(pin)
        self.valueBoxes = []
        self.createBoxes()

        self.saveButton = QPushButton("Save and Return!", self)     # Create save button object
        self.saveButton.setGeometry(1500, 525, 200, 50)              # Set dimensions for pushbutton
        self.saveButton.clicked.connect(self.savePin)             # Sets callback


    def createBoxes(self):
        centralWidget = QWidget(self)  # Create a central widget for the main window
        # self.setCentralWidget(centralWidget)  # Set the central widget

        self.mainLayout = QVBoxLayout(centralWidget)  # Create a vertical layout for the central widget

        self.basicDataLabel("Key code", self.userInfo["Pincode"])

        for key in ["Name", "Birthday", "Phone Number", "E-Mail", "Address"]:
            self.basicDataLabel(key, self.userInfo[key], 1)

        createDate = datetime.fromtimestamp(self.userInfo["creationDate"]).strftime("%A, %B %d, %Y %I:%M:%S")
        self.basicDataLabel("Creation Date", createDate)

        centralWidget.setGeometry(50, 50, int(self.winSize[0]*0.6), self.winSize[1]-200)        # Set the size and position of the central widget


    def basicDataLabel(self, key, value, edit=0):
        lineUp = QHBoxLayout()

        label = QLabel(key)
        label.setFont(QFont("Arial", 25))
        label.setFixedHeight(int(self.winSize[1]/12))
        label.setFixedWidth( int(self.winSize[0]/5))
        label.setStyleSheet("border: 2px dashed red")
        
        if edit:
            textBox = QTextEdit(value)
        else:
            textBox = QLabel(value)
        textBox.setFont(QFont("Arial", 25))
        textBox.setFixedHeight(int(self.winSize[1]/12))

        lineUp.addWidget(label)
        lineUp.addWidget(textBox)
        self.valueBoxes.append(textBox)
        self.mainLayout.addLayout(lineUp)
        

    def savePin(self):

        keys = ["Name", "Birthday", "Phone Number", "E-Mail", "Address"]
        for index, key in enumerate(keys, 1):
            value = self.valueBoxes[index].toPlainText()
            self.userInfo[key] = value

        FI.writePin(self.userInfo["Pincode"], self.userInfo)

        self.close()



class adminWindow(QMainWindow):
    def __init__(self):                             # Names the figure window as "self"
        super().__init__()                                  # Gives figure window its properties
        self.screen = QDesktopWidget().screenGeometry()                 # Find screen dimensions
        self.winSize = [self.screen.width(), self.screen.height()]      # Window dimensions
        self.setGeometry(0, 0, self.winSize[0], self.winSize[1])        # Set figure dimensions to screen size
        self.setWindowTitle("Admin Information")                        # Create figure window name

        self.titleBar = QLabel(self)                                    # Generate Instructions
        self.titleBar.setText("Enter Password and Press Enter")         # Set label text
        self.titleBar.setFont(QFont("Arial", 20))                       # Set Font
        self.titleBar.setGeometry(100, 50, 600, 50)                     # Set position
        
        self.passWord = QLineEdit(self)                                 # Passwords box
        self.passWord.setFont(QFont("Arial", 20)) 
        self.passWord.setGeometry(100, 100, int(self.winSize[0]*0.3), 100)
        self.passWord.returnPressed.connect(self.onPassPress)           # Declare enter command
        

    def onPassPress(self):        
        if self.passWord.text() == "":                  # If it is the password
            self.searchBar = QLineEdit(self)                        # Place searchbar
            self.searchBar.setFont(QFont("Arial", 20)) 
            self.searchBar.setGeometry(100, 100, int(self.winSize[0]*0.3), 100)
            self.searchBar.show()                                   # Update screen
            # self.searchBar.returnPressed.connect()                  # Set search enter command

            self.passWord.deleteLater()                             # Delete password box
            self.titleBar.setText("Type name here")                      # Overwrite title

            self.masterList = []
            for pinNumber in FI.getPinList():
                self.masterList.append(FI.readPin(pinNumber))

            searchList = QVBoxLayout(self)
            for tag in self.masterList:
                currItem = KeyCodeButton(tag)
                currItem.clicked.connect(self.openSearch)
                searchList.addWidget(currItem)

            scroll = QScrollArea(self)                      # Create scroll area
            scroll.setWidgetResizable(True)
            widget = QWidget()
            widget.setLayout(searchList)
            scroll.setWidget(widget)
            scroll.setGeometry(100, 300, int(self.winSize[0]*0.3), 500)
            scroll.show()

            centralWidget = QWidget(self)  # Create a central widget for the main window

            self.mainLayout = QVBoxLayout(centralWidget)  # Create a vertical layout for the central widget
            self.valueBoxes = []
            self.basicDataLabel("Key code", " ")
            for key in ["Name", "Birthday", "Phone Number", "E-Mail", "Address"]:
                self.basicDataLabel(key, " ")
            self.basicDataLabel("Creation Date", " ")

            centralWidget.setGeometry(int(self.winSize[0]*0.4), 50, int(self.winSize[0]*0.6), self.winSize[1]-200)        # Set the size and position of the central widget
            centralWidget.show()
    

    def basicDataLabel(self, key, value, edit=0):
        """
        Method adds a label to the display layout
        Inputs:
            key (str) 
        """
        lineUp = QHBoxLayout()

        label = QLabel(key)
        label.setFont(QFont("Arial", 22))
        label.setFixedHeight(int(self.winSize[1]/12))
        label.setFixedWidth( int(self.winSize[0]/5))
        label.setStyleSheet("border: 2px dashed red")
        
        if edit:
            textBox = QTextEdit(value)
        else:
            textBox = QLabel(value)
        textBox.setFont(QFont("Arial", 25))
        textBox.setFixedHeight(int(self.winSize[1]/12))

        lineUp.addWidget(label)
        lineUp.addWidget(textBox)
        self.valueBoxes.append(textBox)
        self.mainLayout.addLayout(lineUp)
        

    def openSearch(self):
        """
        Sets the display boxes to the value off the pressed box
        """
        value = self.sender()                               # Get the pressed box data
        user = FI.readPin(value.code())     # type: ignore  # Open the json file
        self.valueBoxes[0].setText(user["Pincode"])         # Set display box 1 value 
        self.valueBoxes[1].setText(user["Name"])
        self.valueBoxes[2].setText(user["Birthday"])
        self.valueBoxes[3].setText(user["Phone Number"])
        self.valueBoxes[4].setText(user["E-Mail"])
        self.valueBoxes[5].setText(user["Address"])
        



class KeyCodeButton(QPushButton):
    """
    Custom QPushButton subclass representing a button with associated user information.
    """

    def __init__(self, user):
        """
        Initialize the KeyCodeButton.
        Input:  user (dict): A dictionary containing user information.
        """
        super().__init__()                  # Include pushbutton props
        self.user = user                    # Set input as a property
        self.setText(str(user["Name"]))     # Set the name
        self.setFont(QFont("Arial", 16))    # Set the font

    def code(self):
        """
        Get the pin code associated with the button.
        Outputs: str: The pin code as a string.
        """
        return str(self.user["Pincode"])



class centeredLabel(QLabel):
    def __init__(self, text: str, font: int):
        super().__init__()
        self.setText(text)
        self.setAlignment(Qt.AlignCenter) # type: ignore
        self.setFont(QFont("Arial", font))  


if __name__ == '__main__':
    app = QApplication(sys.argv)
    wind = primeWindow()
    wind.show()
    sys.exit(app.exec_())